install.packages("gmodels")
Cars <- read.csv("data/Cars.cvs")
Cars
Cars <- read.csv("data/Cars.cvs")
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine-size, y=Cars$price, main="engine-size ~ price")
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split = sample.split(Cars$make, SplitRatio = 0.7)
split
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.7)
split
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
Cars = lm(formula = make ~., data=Cars)
View(Cars)
Cars = lm(formula = make ~., data=Cars)
Cars = lm(formula = make ~., data=Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
install.packages('caTools')
library(caTools)
install.packages("caTools")
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
Cars = lm(formula = make ~., data=Cars)
summary(Cars)
plot(Cars)
plot(Cars)
Cars
plot(Cars)
summary(Cars)
plot(Cars)
View(Cars)
Cars <- read.csv("data/Cars.csv")
plot(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
Cars = lm(formula = make ~., data=Cars)
summary(Cars)
plot(Cars)
Cars.lm.coefficients
predictions = predict(Cars, predictions = testing)
predictions
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
Cars = lm(formula = make ~., data=Cars)
Cars = lm(formula = make ~ price., data=Cars)
Cars = lm(formula = make ~ price., data=Cars)
summary(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
Cars = lm(formula = make ~ price., data=Cars)
Cars = lm(formula = make ~ price, data=Cars)
summary(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.8)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
abline = lm(make ~ price, data=Cars)
summary(Cars)
abline = lm(formula = make ~., data=Cars)
summary(abline)
plot(abline)
Cars <- read.csv("data/Cars.csv")
View(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
cor(engine.size ~ price)
cor(x ~ y)
cor(x,y)
model <- lm(y ~ x)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
plot(Cars)
plot(Cars)
abline(Cars)
plot.new(Cars)
plot(Cars)
plot(Cars)
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
plot(Cars)
abline(Cars)
plot(Cars)
abline(Cars)
plot(Cars)
abline(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.7)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
model <- lm(formula = make ~., data=Cars)
model <- lm(engine.size ~ price., data=Cars)
model <- lm(engine.size ~ make, data=Cars)
summary(model)
plot(model)
predictions = predict(Cars, predictions = testing)
predictions = predict(Cars, predictions = testing)
predictions
install.packages("caTools")
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.7)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
model <- lm(formula =  make ~., data=Cars)
summary(model)
plot(model)
model <- lm(engine.size ~ make, data=Cars)
summary(model)
plot(model)
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
str(dataset)
dataset <- dataset[c('Hit target','Height',
'Weight','Age')]
View(dataset)
View(dataset)
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
str(dataset)
dataset <- dataset[c('Hit target','Height',
'Weight','Age')]
dataset <- data.frame(dataset[c('Hit target','Height',
'Weight','Age')])
dataset <- data.frame(dataset, c('Hit target','Height',
'Weight','Age'))
str(dataset.subset)
head(dataset.subset)
summary(dataset.subset[c('Hit target','Height',
'Weight')])
dataset.subset <- data.frame(dataset, c('Hit target','Height',
'Weight','Age'))
str(dataset.subset)
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
str(dataset)
dataset.subset <- data.frame(dataset, c('Hit target','Height',
'Weight','Age'))
str(dataset.subset)
head(dataset.subset)
summary(dataset.subset[c('Hit target','Height',
'Weight')])
summary(dataset.subset(dataset, c('Hit target','Height',
'Weight')))
summary(dataset.subset)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))}
dataset.subset.n <- as.data.frame(lapply(dataset.subset[,1:5], normalize))
head(dataset.subset.n)
set.seed(123)
dat.d <- sample(1:nrow(dataset.subset.n),size=nrow(dataset.subset.n)*0.7,replace = FALSE) #random selection of 70% data.
train <- dataset.subset[dat.d,] # 70% training data
test <- dataset.subset[-dat.d,] # remaining 30% test data
train_labels <- dataset.subset[dat.d,1]
testlabels <-dataset.subset[-dat.d,1]
#Install class package
install.packages('class')
# Load class package
library(class)
NROW(train_labels)
no.1 <- knn(train = train, test =
test, cl = train_labels, k=11)
no.1 <- knn(train = train, test =
test, cl = train_labels, k=11)
no.2 <- knn(train = train., test =
test, cl = train_labels, k=12)
training <- dataset.subset[dat.d,] # 70% training data
testing <- dataset.subset[-dat.d,] # remaining 30% test data
training_labels <- dataset.subset[dat.d,1]
testing_labels <-dataset.subset[-dat.d,1]
#Install class package
install.packages('class')
install.packages("class")
NROW(training_labels)
no.1 <- knn(train = training, test =
testing, cl = training_labels, k=11)
no.2 <- knn(train = training., test =
testing, cl = training_labels, k=12)
ACC.11 <- 100 * sum(test_labels == knn.11)/NROW(test_labels)
ACC.11 <- 100 * sum(testing_labels == no.1)/NROW(testing_labels)
n1 <- knn(train = training, test =
testing, cl = training_labels, k=11)
n2 <- knn(train = training., test =
testing, cl = training_labels, k=12)
ACC.11 <- 100 * sum(testing_labels == n1)/NROW(testing_labels)
ACC.12 <- 100 * sum(testing_labels == n2)/NROW(testing_labels)
confusionMatrix(table(n1 ,testing_labels))
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
str(dataset)
dataset.subset <- dataset[ c('Hit target','Height',
'Weight','Age')]
dataset.subset <- data.frame(dataset, c('Hit target','Height',
'Weight','Age'))
str(dataset.subset)
head(dataset.subset)
summary(dataset.subset(data.frame(dataset, c('Hit target','Height',
'Weight'))))
summary(dataset(data.frame(dataset, c('Hit target','Height',
'Weight'))))
summary((data.frame(dataset, c('Hit target','Height',
'Weight'))))
summary(data.frame(dataset, c('Hit target','Height',
'Weight')))
summary(dataset.subset[c('Height','Weight','Age')])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))}
dataset.subset.n <- as.data.frame(lapply(dataset.subset[,1:5], normalize))
head(dataset.subset.n)
set.seed(123)
dat.d <- sample(1:nrow(dataset.subset.n),size=nrow(dataset.subset.n)*0.7,replace = FALSE) #random selection of 70% data.
training <- dataset.subset[dat.d,] # 70% training data
testing <- dataset.subset[-dat.d,] # remaining 30% test data
training_labels <- dataset.subset[dat.d,1]
testing_labels <-dataset.subset[-dat.d,1]
# Load class package
library(class)
NROW(training_labels)
n1 <- knn(train = training, test =
testing, cl = training_labels, k=11)
n1 <- knn(train = training, test =
testing, cl = training_labels, k=51)
# Load class package
library(class)
n1 <- knn(train = training, test =
testing, cl = training_labels, k=51)
prediction<- knn(train = training, test =
testing, cl = training_labels, k=51)
prediction<- knn(train = training, test =
testing, cl = training_labels, k=21)
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
str(dataset)
dataset.subset <- data.frame(dataset, c('Hit target','Height',
'Weight','Age'))
str(dataset.subset)
head(dataset.subset)
summary(dataset.subset[c('Height','Weight','Age')])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))}
dataset.subset.n <- as.data.frame(lapply(dataset.subset[,1:5], normalize))
head(dataset.subset.n)
set.seed(123)
dat.d <- sample(1:nrow(dataset.subset.n),size=nrow(dataset.subset.n)*0.7,replace = FALSE) #random selection of 70% data.
training <- dataset.subset.n[dat.d,] # 70% training data
testing <- dataset.subset.n[-dat.d,] # remaining 30% test data
training_labels <- dataset.subset[dat.d,1]
testing_labels <-dataset.subset[-dat.d,1]
# Load class package
library(class)
NROW(training_labels)
prediction<- knn(train = training, test =
testing, cl = training_labels, k=21)
prediction2 <- knn(train = training., test =
testing, cl = training_labels, k=12)
prediction2 <- knn(train = training., test =
testing, cl = training_labels, k=22)
prediction2 <- knn(train = training., test =
testing, cl = training_labels, k=22)
sum1 <- 100 * sum(testing_labels == prediction)/NROW(testing_labels)
View(normalize)
install.packages('caret')
library(caret)
install.packages('e1071')
library(e1071)
confusionMatrix(table(prediction ,testing_labels))
View(dataset)
CrossTable(prediction, testing_labels,
prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE)
install.packages("gmodels")
library(gmodels)
CrossTable(prediction, testing_labels,
prop.chisq = FALSE,
prop.c = FALSE, prop.r = FALSE)
View(dataset)
dataset <- read.csv("data/Absenteeism.csv",
stringsAsFactors = FALSE)
dataset$id<-NULL
table(dataset$diagnosis)
dataset$diagnosis<- factor(dataset$diagnosis,
levels = c('H', 'W'),
lables = c('Height', 'Weight'))
dataset$diagnosis<- factor(dataset$diagnosis,
levels = c('H', 'W'),
lables = c('Height' ,'Weight'))
prop.table(table(dataset$diagnosis))
summary(dataset[c('Height','Weight','Age')])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
dataset_n <- as.data.frame(lapply(dataset[2:31], normalize))
summary(dataset_n$area_mean)
dataset_train <- dataset_n[1:500, ]
dataset_test <- dataset_n[501:740, ]
dataset_train_labels <- dataset[1:500, 1]
dataset_n <- as.data.frame(lapply(dataset[2:31], normalize))
summary(dataset_n$Age)
dataset_train <- dataset_n[1:500, ]
View(dataset)
install.packages("C50")
absent<- read.csv("data/Absenteeism.csv", stringsAsFactors = F)
absent$id <- NULL
absent$Social.drinker <- factor(absent$Social.drinker, levels = c("0", "1"),
labels = c("No", "Yes"))
summary(absent)
set.seed(1)
absent_rand <- absent[order(runif(100)), ]
absent_train <- absent_rand[1:80,]
absent_test <- absent_rand[81:100,]
prop.table(table(absent_train$Social.drinker))
prop.table(table(absent_test$Social.drinker))
model <- C5.0(Social.drinker ~ ., data = absent_train)
library (C50)
model <- C5.0(Social.drinker ~ ., data = absent_train)
summary(model)
model
prediction <- predict(model, absent_test)
library(gmodels)
CrossTable(prediction, absent_test$Social.drinker,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('predicted drinker', 'actual drinker'))
Cars <- read.csv("data/Cars.csv")
Cars
summary(Cars)
plot(Cars)
abline(Cars)
scatter.smooth(x=Cars$engine.size, y=Cars$price, main="engine.size ~ price")
library(caTools)
set.seed(123)
split = sample.split(Cars$make, SplitRatio = 0.7)
split
training = subset(Cars, split == TRUE)
testing = subset(Cars, split == FALSE)
model <- lm(engine.size ~ make, data=Cars)
summary(model)
plot(model)
model.lm.coefficients
predictions = predict(Cars, predictions = testing)
predictions
plot(model)
library(gmodels)
library(class)
absent<- read.csv("data/Absenteeism.csv", stringsAsFactors = F)
absent$id <- NULL
table(absent$Social.drinker)
absent$Social.drinker <- factor(absent$Social.drinker, levels = c("0", "1"),
labels = c("No", "Yes"))
table(absent$Social.drinker)
class(absent)
summary(absent[c("Age", "Height", "Weight", "Son", "Pet", "Seasons")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
absent_n <- as.data.frame(lapply(absent[1:5], normalize))
summary(absent_n)
absent_train <- absent_n[1:70,]
absent_test <- absent_n[71:80,]
absent_train_labels <- absent[1:70,6]
absent_test_labels <- absent[71:80,6]
predictions <- knn(train = absent_train, test = absent_test,
cl = absent_train_labels, k=8)
CrossTable(predictions, absent_test_labels,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
plot(absent_n)
plot(predictions)
plot(c(absent_n$Age,absent_n$Height,absent_n$Weight))
predictions <- knn(train = absent_train, test = absent_test,
cl = absent_train_labels, k=2)
CrossTable(predictions, absent_test_labels,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
predictions <- knn(train = absent_train, test = absent_test,
cl = absent_train_labels, k=10)
CrossTable(predictions, absent_test_labels,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
predictions <- knn(train = absent_train, test = absent_test,
cl = absent_train_labels, k=3)
CrossTable(predictions, absent_test_labels,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE)
